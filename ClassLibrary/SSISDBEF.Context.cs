//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClassLibrary
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SSISDBEntities : DbContext
    {
        public SSISDBEntities()
            : base("name=SSISDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<codeGenerator> codeGenerators { get; set; }
        public virtual DbSet<collectionPoint> collectionPoints { get; set; }
        public virtual DbSet<department> departments { get; set; }
        public virtual DbSet<disbursement> disbursements { get; set; }
        public virtual DbSet<disbursementDetail> disbursementDetails { get; set; }
        public virtual DbSet<discrepancy> discrepancies { get; set; }
        public virtual DbSet<item> items { get; set; }
        public virtual DbSet<menu> menus { get; set; }
        public virtual DbSet<menuByRole> menuByRoles { get; set; }
        public virtual DbSet<purchaseOrder> purchaseOrders { get; set; }
        public virtual DbSet<reorderItem> reorderItems { get; set; }
        public virtual DbSet<requisition> requisitions { get; set; }
        public virtual DbSet<requisitionDetail> requisitionDetails { get; set; }
        public virtual DbSet<role> roles { get; set; }
        public virtual DbSet<supplier> suppliers { get; set; }
        public virtual DbSet<supplierPrice> supplierPrices { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<uomeasure> uomeasures { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<purchaseOrderDetail> purchaseOrderDetails { get; set; }
    
        public virtual ObjectResult<SelectPurchaseOrderData_Result> SelectPurchaseOrderData(string monthYear, string supplier, string category)
        {
            var monthYearParameter = monthYear != null ?
                new ObjectParameter("MonthYear", monthYear) :
                new ObjectParameter("MonthYear", typeof(string));
    
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseOrderData_Result>("SelectPurchaseOrderData", monthYearParameter, supplierParameter, categoryParameter);
        }
    
        public virtual ObjectResult<SelectRequisitionByDepartmentID_Result> SelectRequisitionByDepartmentID(string departmentID)
        {
            var departmentIDParameter = departmentID != null ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRequisitionByDepartmentID_Result>("SelectRequisitionByDepartmentID", departmentIDParameter);
        }
    
        public virtual ObjectResult<SelectRequisitionData_Result> SelectRequisitionData(string status, string monthYear, string department, string category)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var monthYearParameter = monthYear != null ?
                new ObjectParameter("MonthYear", monthYear) :
                new ObjectParameter("MonthYear", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRequisitionData_Result>("SelectRequisitionData", statusParameter, monthYearParameter, departmentParameter, categoryParameter);
        }
    
        public virtual ObjectResult<SelectStockBalanceData_Result> SelectStockBalanceData(string category, string itemName)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectStockBalanceData_Result>("SelectStockBalanceData", categoryParameter, itemNameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateDisbursementStatus(string disId, string status)
        {
            var disIdParameter = disId != null ?
                new ObjectParameter("disId", disId) :
                new ObjectParameter("disId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateDisbursementStatus", disIdParameter, statusParameter);
        }
    
        public virtual int updateDisbursmentPro(string disId, string itemId, Nullable<int> deliveredQty)
        {
            var disIdParameter = disId != null ?
                new ObjectParameter("disId", disId) :
                new ObjectParameter("disId", typeof(string));
    
            var itemIdParameter = itemId != null ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(string));
    
            var deliveredQtyParameter = deliveredQty.HasValue ?
                new ObjectParameter("deliveredQty", deliveredQty) :
                new ObjectParameter("deliveredQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateDisbursmentPro", disIdParameter, itemIdParameter, deliveredQtyParameter);
        }
    
        public virtual int updateReqStatusFromInProgressPro(string deptId)
        {
            var deptIdParameter = deptId != null ?
                new ObjectParameter("deptId", deptId) :
                new ObjectParameter("deptId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateReqStatusFromInProgressPro", deptIdParameter);
        }
    
        public virtual int updateReqStatusPro(string reqId, string status)
        {
            var reqIdParameter = reqId != null ?
                new ObjectParameter("reqId", reqId) :
                new ObjectParameter("reqId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateReqStatusPro", reqIdParameter, statusParameter);
        }
    
        public virtual int updateRequisitionDeliveryPro(string reqId, string itemId, Nullable<int> deliveredQty)
        {
            var reqIdParameter = reqId != null ?
                new ObjectParameter("reqId", reqId) :
                new ObjectParameter("reqId", typeof(string));
    
            var itemIdParameter = itemId != null ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(string));
    
            var deliveredQtyParameter = deliveredQty.HasValue ?
                new ObjectParameter("deliveredQty", deliveredQty) :
                new ObjectParameter("deliveredQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateRequisitionDeliveryPro", reqIdParameter, itemIdParameter, deliveredQtyParameter);
        }
    
        public virtual int updateStockPro(string itemId, Nullable<int> stock)
        {
            var itemIdParameter = itemId != null ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateStockPro", itemIdParameter, stockParameter);
        }
    }
}
